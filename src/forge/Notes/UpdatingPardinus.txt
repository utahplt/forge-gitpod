From command line:
1. cd <pardinus-repo-parent-dir>/Pardinus
2. git checkout <branch desired; likely master>
3. mvn -Dmaven.test.skip=true install
	If it runs tests, it fails a couple so the build fails
	and the jar doesn't appear.
	However, it compiles properly so we still get a nice jar
	if we skip running the tests.
	This will create pardinus-1.2.3.jar in the Pardinus/target directory.
4. cd <forge-repo-parent-dir>/Forge/forge/pardinus-cli/jar
5. cp <pardinus-repo-parent-dir>/Pardinus/target/pardinus-1.2.3.jar kodkod.jar
	For now, I'm still calling it kodkod.jar -
	I'll deal with renaming after we know it works.
	Also, you don't need kodkod-cli.jar anymore if it's in there.
6. cd ../..
7. raco pkg remove forge
8. raco pkg install

To build native libraries, you'll likely want to use waf, which is what the README in
the Pardinus repo suggests. See that file for more general instructions on building 
depdendencies. Be aware that you'll need 
* wget
* ocaml, and 
* opam. 

On MacOS, these are available via brew.

MacOS libraries (dylib) can be built for x86_64, arm64 (M1), or universal. See:
https://developer.apple.com/documentation/apple-silicon/building-a-universal-macos-binary
To determine which architectures a dylib is built for, use:
lipo -archs <dylib file>
Tim's Pardinus fork contains wscript files for building minisat and minisatp universal dylibs.
https://github.com/tnelson/pardinus
(as of Jan 2023, see feat-build-arm64 branch).

