// OK!!!! What menu of options do we want for the visualization? That's second priority.

/*
colors for nodes and edges
name changes?
font size
hiding/showing
box types / line types
show relaitons as attributes
numbering nodes?
line weights
layout options: force, arcing edges, separations?

function options for these where available.
how to represent hyper edges
compound areas?
projection type things? graph changes.

I can organize these into two types of styling:
graph changes, and style changes.
graph changes are more complex, and will require more thought, definitely.


graph is moving back to starting position when you tab to another tab and back,
that's on list to fix.

multiple runs are screwed up, and cytoscape isn't fitting things correctly.

plan: minimal documentation on presentation and manipulation, then styling work.
Can honestly just put a link to the html for the documentation in the thing, that would be
even better i think.

ALSO: unsat behavior!!!!



*/

// OK, what's the most basic styling I can start with?
// Color, adjust the color.

// How? Need a menu thing there... what? and where?
// Do it on top of the model, that's easy.
// so put a div there.
//



// how to do more complicated layouts? I think compound nodes are the answer.
// make a compound node containing all state atoms, for instance, and then it's way easier to lay out.
// Hmmm, but how extensible is that. because each node can only have one parent...
// I guess if we want to lay out some groups differently, we just don't apply the layout to them, but only to a
// compound node parent containing all of them, and then lay them out individually. Yeah, that works fine.

// more important: unique colors for each relation of arity > 1!
// Is that super important though? Cleaning up other stuff might be more important...
// I'm exhausted. Think about this later.









engineering debt! highest priority
where is the debt? kodkod-cli is my priority right now.
I don't want to reduce the functionality of kodkod-cli, that's silly and short-sighted.
I want to make the functionality that I need, easy to do.


different colored edges (eh?)
expanding instance into visualizer: you evaluate some expression, and check some box, to expand instance
you can add a relation. Evaluating a predicate is weirder, so don't do that for now.
removing relations.
optional zooming, font size in evaluator, maybe hiding and showing
relations as attributes? projections?
projection is just for state, remember. so not yet.
relations as attributes is low priority, but do want it as base functionality.
saved theming would be nice for later, file based

using kodkod to evaluate instead of doing it ourselves


we really really need logging from each layer! that's part of the engineering debt.
and we need good errors / error propagation. also part of engineering debt
check relation arities before running! those should prob be part of ast.
focus should be on ocelot, cuz we should really really trust kodkod.


evaluator really important, used in class


In the end, we will definitely want a clustered layout. So, probably using compound notes,
which will take some thought.





Chat with tim:

	// maybe students can put hints in forge source file for layout
	// no layout works for everything.
	// try dag based layout.
	// compound nodes!

	// focus on annotations for theming?
	// and maybe manual theming input, like text input.
	// because we don't really know which options to do yet.
