This is specific to my StepperProblem. Input must consist of:

A configuration.
A Universe declaration
Ints declaration (optional)

The tricky bit: DeclareRelation, DefNode, and Asserts make up the body

Input concludes with (solve), followed by (clear), (exit), or eoi.
(clear) resets with a new Problem.
(exit) ends the program.
eoi ends the StepperProblem() parse, and allows us to begin another, without resetting the underlying KodKodProblem.
So that's why we can get next solutions.

Now, DeclareRelation isn't very interesting right now. IT's pretty self-explanatory. You set up bounds, with limited operations allowed in bound expressions.

Asserts are also not very interesting. Limited Boolean expressions permitted.

The interesting one is DefNode, where we can declare expressions, ints, or facts.
Facts are the interesting ones. What sorts of facts can we declare? Not called facts, called constraints.

Here are the interesting constraints: MultConstraint (one/lone/no), SomeConstraint, QuantConstraint
Multconstraints work exactly as expected. QuantConstraints can get trickier.

A QuantConstraint starts with a quantrule, then declarations, and then a constraint parameterized by the declarations.
So, how do VarDecls work?

v : multiplicity expression
multiplicity defaults to one.
declareVariable(varIdx.get(), popMult(), popExpr()))
The arity of v of course matches the expression. But if the arity is greater than 1, then the multiplicity must be SET.
And that's about it?

